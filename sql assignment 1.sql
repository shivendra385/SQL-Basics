use mavenmovies;
#1 Retrieve the total number of rentals made in the Sakila database.
SELECT COUNT(*) AS total_rentals
FROM rental;
#2 Find the average rental duration (in days) of movies rented from the Sakila database.
SELECT AVG(DATEDIFF(return_date, rental_date)) AS avg_rental_duration
FROM rental;
#3 Display the first name and last name of customers in uppercase.
SELECT UPPER(first_name) AS first_name, UPPER(last_name) AS last_name
FROM customer;
#4 Extract the month from the rental date and display it alongside the rental ID.
SELECT rental_id, MONTH(rental_date) AS rental_month
FROM rental;
#5 Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
SELECT customer_id, COUNT(*) AS rental_count
FROM rental
GROUP BY customer_id;
#6 Find the total revenue generated by each store.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id;
#7 Determine the total number of rentals for each category of movies.

SELECT c.name AS category_name, COUNT(r.rental_id) AS rental_count
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name;
#8 Find the average rental rate of movies in each language.
SELECT l.name AS language_name, AVG(f.rental_rate) AS avg_rental_rate
FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name;
#9 Display the title of the movie, customer s first name, and last name who rented it.
SELECT f.title AS movie_title, c.first_name, c.last_name
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id;
#10 Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
SELECT a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.title = 'Gone with the Wind';
#11 Retrieve the customer names along with the total amount they've spent on rentals
SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;
#12 List the titles of movies rented by each customer in a particular city (e.g., 'London').
SELECT c.city, cu.first_name, cu.last_name, f.title AS movie_title
FROM city c
JOIN address a ON c.city_id = a.city_id
JOIN customer cu ON a.address_id = cu.address_id
JOIN rental r ON cu.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE c.city = 'London';
#13 Display the top 5 rented movies along with the number of times they've been rented
SELECT 
  f.title AS movie_title, 
  COUNT(r.rental_id) AS rental_count
FROM 
  film f
JOIN 
  inventory i ON f.film_id = i.film_id
JOIN 
  rental r ON i.inventory_id = r.inventory_id
GROUP BY 
  f.title
ORDER BY 
  rental_count DESC
LIMIT 5;
#14 Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
SELECT 
  c.customer_id, 
  c.first_name, 
  c.last_name
FROM 
  customer c
JOIN 
  rental r ON c.customer_id = r.customer_id
JOIN 
  inventory i ON r.inventory_id = i.inventory_id
WHERE 
  i.store_id IN (1, 2)
GROUP BY 
  c.customer_id, c.first_name, c.last_name
HAVING 
  COUNT(DISTINCT i.store_id) = 2;
#15  Rank the customers based on the total amount they've spent on rentals.
SELECT 
  c.customer_id, 
  c.first_name, 
  c.last_name, 
  SUM(p.amount) AS total_spent,
  RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spend_rank
FROM 
  customer c
JOIN 
  payment p ON c.customer_id = p.customer_id
GROUP BY 
  c.customer_id, c.first_name, c.last_name
ORDER BY 
  total_spent DESC;
#16 Calculate the cumulative revenue generated by each film over time
SELECT 
  f.film_id, 
  f.title, 
  r.rental_date, 
  SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS cumulative_revenue
FROM 
  film f
JOIN 
  inventory i ON f.film_id = i.film_id
JOIN 
  rental r ON i.inventory_id = r.inventory_id
JOIN 
  payment p ON r.rental_id = p.rental_id
ORDER BY 
  f.film_id, r.rental_date;
#17 Determine the average rental duration for each film, considering films with similar lengths
  SELECT 
  f.film_id, 
  f.title, 
  f.length, 
  AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration
FROM 
  film f
JOIN 
  inventory i ON f.film_id = i.film_id
JOIN 
  rental r ON i.inventory_id = r.inventory_id
GROUP BY 
  f.length, f.film_id, f.title
ORDER BY 
  f.length;
 #18  Identify the top 3 films in each category based on their rental counts
 WITH film_rental_counts AS (
  SELECT 
    c.name AS category_name, 
    f.title, 
    COUNT(r.rental_id) AS rental_count,
    ROW_NUMBER() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS row_num
  FROM 
    film f
  JOIN 
    film_category fc ON f.film_id = fc.film_id
  JOIN 
    category c ON fc.category_id = c.category_id
  JOIN 
    inventory i ON f.film_id = i.film_id
  JOIN 
    rental r ON i.inventory_id = r.inventory_id
  GROUP BY 
    c.name, f.title
)
SELECT 
  category_name, 
  title, 
  rental_count
FROM 
  film_rental_counts
WHERE 
  row_num <= 3;
 #19  Calculate the difference in rental counts between each customer's total rentals and the average rentals
#across all customers. 

WITH customer_rentals AS (
  SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(r.rental_id) AS total_rentals
  FROM 
    customer c
  JOIN 
    rental r ON c.customer_id = r.customer_id
  GROUP BY 
    c.customer_id, c.first_name, c.last_name
),
avg_rentals AS (
  SELECT 
    AVG(total_rentals) AS avg_rental_count
  FROM 
    customer_rentals
)
SELECT 
  cr.customer_id, 
  cr.first_name, 
  cr.last_name, 
  cr.total_rentals, 
  ar.avg_rental_count, 
  cr.total_rentals - ar.avg_rental_count AS rental_diff
FROM 
  customer_rentals cr
CROSS JOIN 
  avg_rentals ar
ORDER BY 
  rental_diff DESC;
  #20  Find the monthly revenue trend for the entire rental store over time.
  
SELECT 
  YEAR(r.rental_date) AS year, 
  MONTH(r.rental_date) AS month, 
  SUM(p.amount) AS monthly_revenue
FROM 
  rental r
JOIN 
  payment p ON r.rental_id = p.rental_id
GROUP BY 
  YEAR(r.rental_date), MONTH(r.rental_date)
ORDER BY 
  year, month;
#21 . Identify the customers whose total spending on rentals falls within the top 20% of all customers
WITH customer_spending AS (
  SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(p.amount) AS total_spent,
    PERCENT_RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spend_percentile
  FROM 
    customer c
  JOIN 
    payment p ON c.customer_id = p.customer_id
  GROUP BY 
    c.customer_id, c.first_name, c.last_name
)
SELECT 
  customer_id, 
  first_name, 
  last_name, 
  total_spent
FROM 
  customer_spending
WHERE 
  spend_percentile <= 0.2;
#22 Calculate the running total of rentals per category, ordered by rental count

SELECT 
  c.name AS category_name, 
  COUNT(r.rental_id) AS rental_count,
  SUM(COUNT(r.rental_id)) OVER (ORDER BY COUNT(r.rental_id) DESC) AS running_total
FROM 
  category c
JOIN 
  film_category fc ON c.category_id = fc.category_id
JOIN 
  film f ON fc.film_id = f.film_id
JOIN 
  inventory i ON f.film_id = i.film_id
JOIN 
  rental r ON i.inventory_id = r.inventory_id
GROUP BY 
  c.name
ORDER BY 
  rental_count DESC;
 #23 . Find the films that have been rented less than the average rental count for their respective categories.
#24dentify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT 
  YEAR(p.payment_date) AS year, 
  MONTH(p.payment_date) AS month, 
  SUM(p.amount) AS revenue
FROM 
  payment p
GROUP BY 
  YEAR(p.payment_date), MONTH(p.payment_date)
ORDER BY 
  revenue DESC
LIMIT 5;
#25 #First Normal Form (1NF):
#a. Identify a table in the Sakila database that violates 1NF. Explain how you
#would norm 
CREATE TABLE film_genres (
  film_id INT,
  genre VARCHAR(50),
  PRIMARY KEY (film_id, genre),
  FOREIGN KEY (film_id) REFERENCES film(film_id)
);

#more answer in google docs


  

  
  
  
  
  
  

